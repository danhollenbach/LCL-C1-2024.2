// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/23/2025 08:49:10"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    timer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module timer_vlg_sample_tst(
	CLOCK,
	RESET,
	sampler_tx
);
input  CLOCK;
input  RESET;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK or RESET)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module timer_vlg_check_tst (
	DECIMOS,
	DEZENAS,
	EXPLOSION,
	MINUTOS,
	UNIDADES,
	sampler_rx
);
input [3:0] DECIMOS;
input [3:0] DEZENAS;
input  EXPLOSION;
input [3:0] MINUTOS;
input [3:0] UNIDADES;
input sampler_rx;

reg [3:0] DECIMOS_expected;
reg [3:0] DEZENAS_expected;
reg  EXPLOSION_expected;
reg [3:0] MINUTOS_expected;
reg [3:0] UNIDADES_expected;

reg [3:0] DECIMOS_prev;
reg [3:0] DEZENAS_prev;
reg  EXPLOSION_prev;
reg [3:0] MINUTOS_prev;
reg [3:0] UNIDADES_prev;

reg [3:0] DECIMOS_expected_prev;
reg [3:0] DEZENAS_expected_prev;
reg  EXPLOSION_expected_prev;
reg [3:0] MINUTOS_expected_prev;
reg [3:0] UNIDADES_expected_prev;

reg [3:0] last_DECIMOS_exp;
reg [3:0] last_DEZENAS_exp;
reg  last_EXPLOSION_exp;
reg [3:0] last_MINUTOS_exp;
reg [3:0] last_UNIDADES_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	DECIMOS_prev = DECIMOS;
	DEZENAS_prev = DEZENAS;
	EXPLOSION_prev = EXPLOSION;
	MINUTOS_prev = MINUTOS;
	UNIDADES_prev = UNIDADES;
end

// update expected /o prevs

always @(trigger)
begin
	DECIMOS_expected_prev = DECIMOS_expected;
	DEZENAS_expected_prev = DEZENAS_expected;
	EXPLOSION_expected_prev = EXPLOSION_expected;
	MINUTOS_expected_prev = MINUTOS_expected;
	UNIDADES_expected_prev = UNIDADES_expected;
end


// expected DECIMOS[ 3 ]
initial
begin
	DECIMOS_expected[3] = 1'bX;
end 
// expected DECIMOS[ 2 ]
initial
begin
	DECIMOS_expected[2] = 1'bX;
end 
// expected DECIMOS[ 1 ]
initial
begin
	DECIMOS_expected[1] = 1'bX;
end 
// expected DECIMOS[ 0 ]
initial
begin
	DECIMOS_expected[0] = 1'bX;
end 
// expected UNIDADES[ 3 ]
initial
begin
	UNIDADES_expected[3] = 1'bX;
end 
// expected UNIDADES[ 2 ]
initial
begin
	UNIDADES_expected[2] = 1'bX;
end 
// expected UNIDADES[ 1 ]
initial
begin
	UNIDADES_expected[1] = 1'bX;
end 
// expected UNIDADES[ 0 ]
initial
begin
	UNIDADES_expected[0] = 1'bX;
end 
// expected DEZENAS[ 3 ]
initial
begin
	DEZENAS_expected[3] = 1'bX;
end 
// expected DEZENAS[ 2 ]
initial
begin
	DEZENAS_expected[2] = 1'bX;
end 
// expected DEZENAS[ 1 ]
initial
begin
	DEZENAS_expected[1] = 1'bX;
end 
// expected DEZENAS[ 0 ]
initial
begin
	DEZENAS_expected[0] = 1'bX;
end 
// expected MINUTOS[ 3 ]
initial
begin
	MINUTOS_expected[3] = 1'bX;
end 
// expected MINUTOS[ 2 ]
initial
begin
	MINUTOS_expected[2] = 1'bX;
end 
// expected MINUTOS[ 1 ]
initial
begin
	MINUTOS_expected[1] = 1'bX;
end 
// expected MINUTOS[ 0 ]
initial
begin
	MINUTOS_expected[0] = 1'bX;
end 

// expected EXPLOSION
initial
begin
	EXPLOSION_expected = 1'bX;
end 
// generate trigger
always @(DECIMOS_expected or DECIMOS or DEZENAS_expected or DEZENAS or EXPLOSION_expected or EXPLOSION or MINUTOS_expected or MINUTOS or UNIDADES_expected or UNIDADES)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DECIMOS = %b | expected DEZENAS = %b | expected EXPLOSION = %b | expected MINUTOS = %b | expected UNIDADES = %b | ",DECIMOS_expected_prev,DEZENAS_expected_prev,EXPLOSION_expected_prev,MINUTOS_expected_prev,UNIDADES_expected_prev);
	$display("| real DECIMOS = %b | real DEZENAS = %b | real EXPLOSION = %b | real MINUTOS = %b | real UNIDADES = %b | ",DECIMOS_prev,DEZENAS_prev,EXPLOSION_prev,MINUTOS_prev,UNIDADES_prev);
`endif
	if (
		( DECIMOS_expected_prev[0] !== 1'bx ) && ( DECIMOS_prev[0] !== DECIMOS_expected_prev[0] )
		&& ((DECIMOS_expected_prev[0] !== last_DECIMOS_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECIMOS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECIMOS_expected_prev);
		$display ("     Real value = %b", DECIMOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DECIMOS_exp[0] = DECIMOS_expected_prev[0];
	end
	if (
		( DECIMOS_expected_prev[1] !== 1'bx ) && ( DECIMOS_prev[1] !== DECIMOS_expected_prev[1] )
		&& ((DECIMOS_expected_prev[1] !== last_DECIMOS_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECIMOS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECIMOS_expected_prev);
		$display ("     Real value = %b", DECIMOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DECIMOS_exp[1] = DECIMOS_expected_prev[1];
	end
	if (
		( DECIMOS_expected_prev[2] !== 1'bx ) && ( DECIMOS_prev[2] !== DECIMOS_expected_prev[2] )
		&& ((DECIMOS_expected_prev[2] !== last_DECIMOS_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECIMOS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECIMOS_expected_prev);
		$display ("     Real value = %b", DECIMOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DECIMOS_exp[2] = DECIMOS_expected_prev[2];
	end
	if (
		( DECIMOS_expected_prev[3] !== 1'bx ) && ( DECIMOS_prev[3] !== DECIMOS_expected_prev[3] )
		&& ((DECIMOS_expected_prev[3] !== last_DECIMOS_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECIMOS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECIMOS_expected_prev);
		$display ("     Real value = %b", DECIMOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DECIMOS_exp[3] = DECIMOS_expected_prev[3];
	end
	if (
		( DEZENAS_expected_prev[0] !== 1'bx ) && ( DEZENAS_prev[0] !== DEZENAS_expected_prev[0] )
		&& ((DEZENAS_expected_prev[0] !== last_DEZENAS_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEZENAS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEZENAS_expected_prev);
		$display ("     Real value = %b", DEZENAS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DEZENAS_exp[0] = DEZENAS_expected_prev[0];
	end
	if (
		( DEZENAS_expected_prev[1] !== 1'bx ) && ( DEZENAS_prev[1] !== DEZENAS_expected_prev[1] )
		&& ((DEZENAS_expected_prev[1] !== last_DEZENAS_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEZENAS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEZENAS_expected_prev);
		$display ("     Real value = %b", DEZENAS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DEZENAS_exp[1] = DEZENAS_expected_prev[1];
	end
	if (
		( DEZENAS_expected_prev[2] !== 1'bx ) && ( DEZENAS_prev[2] !== DEZENAS_expected_prev[2] )
		&& ((DEZENAS_expected_prev[2] !== last_DEZENAS_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEZENAS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEZENAS_expected_prev);
		$display ("     Real value = %b", DEZENAS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DEZENAS_exp[2] = DEZENAS_expected_prev[2];
	end
	if (
		( DEZENAS_expected_prev[3] !== 1'bx ) && ( DEZENAS_prev[3] !== DEZENAS_expected_prev[3] )
		&& ((DEZENAS_expected_prev[3] !== last_DEZENAS_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEZENAS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEZENAS_expected_prev);
		$display ("     Real value = %b", DEZENAS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DEZENAS_exp[3] = DEZENAS_expected_prev[3];
	end
	if (
		( EXPLOSION_expected_prev !== 1'bx ) && ( EXPLOSION_prev !== EXPLOSION_expected_prev )
		&& ((EXPLOSION_expected_prev !== last_EXPLOSION_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EXPLOSION :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EXPLOSION_expected_prev);
		$display ("     Real value = %b", EXPLOSION_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EXPLOSION_exp = EXPLOSION_expected_prev;
	end
	if (
		( MINUTOS_expected_prev[0] !== 1'bx ) && ( MINUTOS_prev[0] !== MINUTOS_expected_prev[0] )
		&& ((MINUTOS_expected_prev[0] !== last_MINUTOS_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MINUTOS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MINUTOS_expected_prev);
		$display ("     Real value = %b", MINUTOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MINUTOS_exp[0] = MINUTOS_expected_prev[0];
	end
	if (
		( MINUTOS_expected_prev[1] !== 1'bx ) && ( MINUTOS_prev[1] !== MINUTOS_expected_prev[1] )
		&& ((MINUTOS_expected_prev[1] !== last_MINUTOS_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MINUTOS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MINUTOS_expected_prev);
		$display ("     Real value = %b", MINUTOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MINUTOS_exp[1] = MINUTOS_expected_prev[1];
	end
	if (
		( MINUTOS_expected_prev[2] !== 1'bx ) && ( MINUTOS_prev[2] !== MINUTOS_expected_prev[2] )
		&& ((MINUTOS_expected_prev[2] !== last_MINUTOS_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MINUTOS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MINUTOS_expected_prev);
		$display ("     Real value = %b", MINUTOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MINUTOS_exp[2] = MINUTOS_expected_prev[2];
	end
	if (
		( MINUTOS_expected_prev[3] !== 1'bx ) && ( MINUTOS_prev[3] !== MINUTOS_expected_prev[3] )
		&& ((MINUTOS_expected_prev[3] !== last_MINUTOS_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MINUTOS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MINUTOS_expected_prev);
		$display ("     Real value = %b", MINUTOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MINUTOS_exp[3] = MINUTOS_expected_prev[3];
	end
	if (
		( UNIDADES_expected_prev[0] !== 1'bx ) && ( UNIDADES_prev[0] !== UNIDADES_expected_prev[0] )
		&& ((UNIDADES_expected_prev[0] !== last_UNIDADES_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UNIDADES[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UNIDADES_expected_prev);
		$display ("     Real value = %b", UNIDADES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_UNIDADES_exp[0] = UNIDADES_expected_prev[0];
	end
	if (
		( UNIDADES_expected_prev[1] !== 1'bx ) && ( UNIDADES_prev[1] !== UNIDADES_expected_prev[1] )
		&& ((UNIDADES_expected_prev[1] !== last_UNIDADES_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UNIDADES[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UNIDADES_expected_prev);
		$display ("     Real value = %b", UNIDADES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_UNIDADES_exp[1] = UNIDADES_expected_prev[1];
	end
	if (
		( UNIDADES_expected_prev[2] !== 1'bx ) && ( UNIDADES_prev[2] !== UNIDADES_expected_prev[2] )
		&& ((UNIDADES_expected_prev[2] !== last_UNIDADES_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UNIDADES[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UNIDADES_expected_prev);
		$display ("     Real value = %b", UNIDADES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_UNIDADES_exp[2] = UNIDADES_expected_prev[2];
	end
	if (
		( UNIDADES_expected_prev[3] !== 1'bx ) && ( UNIDADES_prev[3] !== UNIDADES_expected_prev[3] )
		&& ((UNIDADES_expected_prev[3] !== last_UNIDADES_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UNIDADES[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UNIDADES_expected_prev);
		$display ("     Real value = %b", UNIDADES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_UNIDADES_exp[3] = UNIDADES_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module timer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg RESET;
// wires                                               
wire [3:0] DECIMOS;
wire [3:0] DEZENAS;
wire EXPLOSION;
wire [3:0] MINUTOS;
wire [3:0] UNIDADES;

wire sampler;                             

// assign statements (if any)                          
timer i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK(CLOCK),
	.DECIMOS(DECIMOS),
	.DEZENAS(DEZENAS),
	.EXPLOSION(EXPLOSION),
	.MINUTOS(MINUTOS),
	.RESET(RESET),
	.UNIDADES(UNIDADES)
);

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #10000 1'b1;
	#10000;
end 

// RESET
initial
begin
	RESET = 1'b1;
	RESET = #30000 1'b0;
end 

timer_vlg_sample_tst tb_sample (
	.CLOCK(CLOCK),
	.RESET(RESET),
	.sampler_tx(sampler)
);

timer_vlg_check_tst tb_out(
	.DECIMOS(DECIMOS),
	.DEZENAS(DEZENAS),
	.EXPLOSION(EXPLOSION),
	.MINUTOS(MINUTOS),
	.UNIDADES(UNIDADES),
	.sampler_rx(sampler)
);
endmodule

