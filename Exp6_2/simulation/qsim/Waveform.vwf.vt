// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/18/2024 08:29:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Pre2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Pre2_vlg_sample_tst(
	A,
	B,
	C,
	D,
	sampler_tx
);
input  A;
input  B;
input  C;
input  D;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or C or D)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Pre2_vlg_check_tst (
	B0,
	B1,
	B2,
	B3,
	B4,
	B5,
	B6,
	B7,
	B8,
	B9,
	sampler_rx
);
input  B0;
input  B1;
input  B2;
input  B3;
input  B4;
input  B5;
input  B6;
input  B7;
input  B8;
input  B9;
input sampler_rx;

reg  B0_expected;
reg  B1_expected;
reg  B2_expected;
reg  B3_expected;
reg  B4_expected;
reg  B5_expected;
reg  B6_expected;
reg  B7_expected;
reg  B8_expected;
reg  B9_expected;

reg  B0_prev;
reg  B1_prev;
reg  B2_prev;
reg  B3_prev;
reg  B4_prev;
reg  B5_prev;
reg  B6_prev;
reg  B7_prev;
reg  B8_prev;
reg  B9_prev;

reg  B0_expected_prev;
reg  B1_expected_prev;
reg  B2_expected_prev;
reg  B3_expected_prev;
reg  B4_expected_prev;
reg  B5_expected_prev;
reg  B6_expected_prev;
reg  B7_expected_prev;
reg  B8_expected_prev;

reg  last_B0_exp;
reg  last_B1_exp;
reg  last_B2_exp;
reg  last_B3_exp;
reg  last_B4_exp;
reg  last_B5_exp;
reg  last_B6_exp;
reg  last_B7_exp;
reg  last_B8_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	B0_prev = B0;
	B1_prev = B1;
	B2_prev = B2;
	B3_prev = B3;
	B4_prev = B4;
	B5_prev = B5;
	B6_prev = B6;
	B7_prev = B7;
	B8_prev = B8;
	B9_prev = B9;
end

// update expected /o prevs

always @(trigger)
begin
	B0_expected_prev = B0_expected;
	B1_expected_prev = B1_expected;
	B2_expected_prev = B2_expected;
	B3_expected_prev = B3_expected;
	B4_expected_prev = B4_expected;
	B5_expected_prev = B5_expected;
	B6_expected_prev = B6_expected;
	B7_expected_prev = B7_expected;
	B8_expected_prev = B8_expected;
end



// expected A
initial
begin
	A_expected = 1'bX;
end 

// expected B
initial
begin
	B_expected = 1'bX;
end 

// expected C
initial
begin
	C_expected = 1'bX;
end 

// expected D
initial
begin
	D_expected = 1'bX;
end 
// generate trigger
always @(B0_expected or B0 or B1_expected or B1 or B2_expected or B2 or B3_expected or B3 or B4_expected or B4 or B5_expected or B5 or B6_expected or B6 or B7_expected or B7 or B8_expected or B8 or B9_expected or B9)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected B0 = %b | expected B1 = %b | expected B2 = %b | expected B3 = %b | expected B4 = %b | expected B5 = %b | expected B6 = %b | expected B7 = %b | expected B8 = %b | expected B9 = %b | ",B0_expected_prev,B1_expected_prev,B2_expected_prev,B3_expected_prev,B4_expected_prev,B5_expected_prev,B6_expected_prev,B7_expected_prev,B8_expected_prev,B9_expected_prev);
	$display("| real B0 = %b | real B1 = %b | real B2 = %b | real B3 = %b | real B4 = %b | real B5 = %b | real B6 = %b | real B7 = %b | real B8 = %b | real B9 = %b | ",B0_prev,B1_prev,B2_prev,B3_prev,B4_prev,B5_prev,B6_prev,B7_prev,B8_prev,B9_prev);
`endif
	if (
		( B0_expected_prev !== 1'bx ) && ( B0_prev !== B0_expected_prev )
		&& ((B0_expected_prev !== last_B0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B0_expected_prev);
		$display ("     Real value = %b", B0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_B0_exp = B0_expected_prev;
	end
	if (
		( B1_expected_prev !== 1'bx ) && ( B1_prev !== B1_expected_prev )
		&& ((B1_expected_prev !== last_B1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B1_expected_prev);
		$display ("     Real value = %b", B1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B1_exp = B1_expected_prev;
	end
	if (
		( B2_expected_prev !== 1'bx ) && ( B2_prev !== B2_expected_prev )
		&& ((B2_expected_prev !== last_B2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B2_expected_prev);
		$display ("     Real value = %b", B2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B2_exp = B2_expected_prev;
	end
	if (
		( B3_expected_prev !== 1'bx ) && ( B3_prev !== B3_expected_prev )
		&& ((B3_expected_prev !== last_B3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B3_expected_prev);
		$display ("     Real value = %b", B3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B3_exp = B3_expected_prev;
	end
	if (
		( B4_expected_prev !== 1'bx ) && ( B4_prev !== B4_expected_prev )
		&& ((B4_expected_prev !== last_B4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B4_expected_prev);
		$display ("     Real value = %b", B4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_B4_exp = B4_expected_prev;
	end
	if (
		( B5_expected_prev !== 1'bx ) && ( B5_prev !== B5_expected_prev )
		&& ((B5_expected_prev !== last_B5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B5_expected_prev);
		$display ("     Real value = %b", B5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_B5_exp = B5_expected_prev;
	end
	if (
		( B6_expected_prev !== 1'bx ) && ( B6_prev !== B6_expected_prev )
		&& ((B6_expected_prev !== last_B6_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B6_expected_prev);
		$display ("     Real value = %b", B6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_B6_exp = B6_expected_prev;
	end
	if (
		( B7_expected_prev !== 1'bx ) && ( B7_prev !== B7_expected_prev )
		&& ((B7_expected_prev !== last_B7_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B7_expected_prev);
		$display ("     Real value = %b", B7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_B7_exp = B7_expected_prev;
	end
	if (
		( B8_expected_prev !== 1'bx ) && ( B8_prev !== B8_expected_prev )
		&& ((B8_expected_prev !== last_B8_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B8_expected_prev);
		$display ("     Real value = %b", B8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_B8_exp = B8_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Pre2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg C;
reg D;
// wires                                               
wire B0;
wire B1;
wire B2;
wire B3;
wire B4;
wire B5;
wire B6;
wire B7;
wire B8;
wire B9;

wire sampler;                             

// assign statements (if any)                          
Pre2 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.B4(B4),
	.B5(B5),
	.B6(B6),
	.B7(B7),
	.B8(B8),
	.B9(B9),
	.C(C),
	.D(D)
);

// B0
initial
begin
	B0 = 1'b1;
	B0 = #40000 1'b0;
end 

// B1
initial
begin
	B1 = 1'b0;
	B1 = #40000 1'b1;
	B1 = #40000 1'b0;
end 

// B2
initial
begin
	B2 = 1'b0;
	B2 = #80000 1'b1;
	B2 = #40000 1'b0;
end 

// B3
initial
begin
	B3 = 1'b0;
	B3 = #120000 1'b1;
	B3 = #40000 1'b0;
end 

// B4
initial
begin
	B4 = 1'b0;
	B4 = #160000 1'b1;
	B4 = #40000 1'b0;
end 

// B5
initial
begin
	B5 = 1'b0;
	B5 = #200000 1'b1;
	B5 = #40000 1'b0;
end 

// B6
initial
begin
	B6 = 1'b0;
	B6 = #240000 1'b1;
	B6 = #40000 1'b0;
end 

// B7
initial
begin
	B7 = 1'b0;
	B7 = #280000 1'b1;
	B7 = #40000 1'b0;
end 

// B8
initial
begin
	B8 = 1'b0;
	B8 = #320000 1'b1;
	B8 = #40000 1'b0;
end 

Pre2_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.sampler_tx(sampler)
);

Pre2_vlg_check_tst tb_out(
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.B4(B4),
	.B5(B5),
	.B6(B6),
	.B7(B7),
	.B8(B8),
	.B9(B9),
	.sampler_rx(sampler)
);
endmodule

