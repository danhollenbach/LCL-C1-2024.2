// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/04/2025 09:07:11"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Exp10
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Exp10_vlg_sample_tst(
	CLOCK,
	SW,
	sampler_tx
);
input  CLOCK;
input [1:0] SW;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK or SW)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Exp10_vlg_check_tst (
	GREEN_C,
	GREEN_P,
	RED_C,
	RED_P,
	YELLOW_C,
	sampler_rx
);
input  GREEN_C;
input  GREEN_P;
input  RED_C;
input  RED_P;
input  YELLOW_C;
input sampler_rx;

reg  GREEN_C_expected;
reg  GREEN_P_expected;
reg  RED_C_expected;
reg  RED_P_expected;
reg  YELLOW_C_expected;

reg  GREEN_C_prev;
reg  GREEN_P_prev;
reg  RED_C_prev;
reg  RED_P_prev;
reg  YELLOW_C_prev;

reg  GREEN_C_expected_prev;
reg  GREEN_P_expected_prev;
reg  RED_C_expected_prev;
reg  RED_P_expected_prev;
reg  YELLOW_C_expected_prev;

reg  last_GREEN_C_exp;
reg  last_GREEN_P_exp;
reg  last_RED_C_exp;
reg  last_RED_P_exp;
reg  last_YELLOW_C_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	GREEN_C_prev = GREEN_C;
	GREEN_P_prev = GREEN_P;
	RED_C_prev = RED_C;
	RED_P_prev = RED_P;
	YELLOW_C_prev = YELLOW_C;
end

// update expected /o prevs

always @(trigger)
begin
	GREEN_C_expected_prev = GREEN_C_expected;
	GREEN_P_expected_prev = GREEN_P_expected;
	RED_C_expected_prev = RED_C_expected;
	RED_P_expected_prev = RED_P_expected;
	YELLOW_C_expected_prev = YELLOW_C_expected;
end



// expected GREEN_C
initial
begin
	GREEN_C_expected = 1'bX;
end 

// expected GREEN_P
initial
begin
	GREEN_P_expected = 1'bX;
end 

// expected RED_C
initial
begin
	RED_C_expected = 1'bX;
end 

// expected RED_P
initial
begin
	RED_P_expected = 1'bX;
end 

// expected YELLOW_C
initial
begin
	YELLOW_C_expected = 1'bX;
end 
// generate trigger
always @(GREEN_C_expected or GREEN_C or GREEN_P_expected or GREEN_P or RED_C_expected or RED_C or RED_P_expected or RED_P or YELLOW_C_expected or YELLOW_C)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected GREEN_C = %b | expected GREEN_P = %b | expected RED_C = %b | expected RED_P = %b | expected YELLOW_C = %b | ",GREEN_C_expected_prev,GREEN_P_expected_prev,RED_C_expected_prev,RED_P_expected_prev,YELLOW_C_expected_prev);
	$display("| real GREEN_C = %b | real GREEN_P = %b | real RED_C = %b | real RED_P = %b | real YELLOW_C = %b | ",GREEN_C_prev,GREEN_P_prev,RED_C_prev,RED_P_prev,YELLOW_C_prev);
`endif
	if (
		( GREEN_C_expected_prev !== 1'bx ) && ( GREEN_C_prev !== GREEN_C_expected_prev )
		&& ((GREEN_C_expected_prev !== last_GREEN_C_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GREEN_C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GREEN_C_expected_prev);
		$display ("     Real value = %b", GREEN_C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GREEN_C_exp = GREEN_C_expected_prev;
	end
	if (
		( GREEN_P_expected_prev !== 1'bx ) && ( GREEN_P_prev !== GREEN_P_expected_prev )
		&& ((GREEN_P_expected_prev !== last_GREEN_P_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GREEN_P :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GREEN_P_expected_prev);
		$display ("     Real value = %b", GREEN_P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_GREEN_P_exp = GREEN_P_expected_prev;
	end
	if (
		( RED_C_expected_prev !== 1'bx ) && ( RED_C_prev !== RED_C_expected_prev )
		&& ((RED_C_expected_prev !== last_RED_C_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RED_C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RED_C_expected_prev);
		$display ("     Real value = %b", RED_C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_RED_C_exp = RED_C_expected_prev;
	end
	if (
		( RED_P_expected_prev !== 1'bx ) && ( RED_P_prev !== RED_P_expected_prev )
		&& ((RED_P_expected_prev !== last_RED_P_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RED_P :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RED_P_expected_prev);
		$display ("     Real value = %b", RED_P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RED_P_exp = RED_P_expected_prev;
	end
	if (
		( YELLOW_C_expected_prev !== 1'bx ) && ( YELLOW_C_prev !== YELLOW_C_expected_prev )
		&& ((YELLOW_C_expected_prev !== last_YELLOW_C_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port YELLOW_C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", YELLOW_C_expected_prev);
		$display ("     Real value = %b", YELLOW_C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_YELLOW_C_exp = YELLOW_C_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Exp10_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg [1:0] SW;
// wires                                               
wire GREEN_C;
wire GREEN_P;
wire RED_C;
wire RED_P;
wire YELLOW_C;

wire sampler;                             

// assign statements (if any)                          
Exp10 i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK(CLOCK),
	.GREEN_C(GREEN_C),
	.GREEN_P(GREEN_P),
	.RED_C(RED_C),
	.RED_P(RED_P),
	.SW(SW),
	.YELLOW_C(YELLOW_C)
);

// SW[1]
initial
begin
	SW[1] = 1'b1;
	SW[1] = #70000 1'b0;
end 

// SW[0]
initial
begin
	SW[0] = 1'b0;
	SW[0] = #450000 1'b1;
	SW[0] = #90000 1'b0;
	SW[0] = #140000 1'b1;
	SW[0] = #20000 1'b0;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #10000 1'b1;
	#10000;
end 

Exp10_vlg_sample_tst tb_sample (
	.CLOCK(CLOCK),
	.SW(SW),
	.sampler_tx(sampler)
);

Exp10_vlg_check_tst tb_out(
	.GREEN_C(GREEN_C),
	.GREEN_P(GREEN_P),
	.RED_C(RED_C),
	.RED_P(RED_P),
	.YELLOW_C(YELLOW_C),
	.sampler_rx(sampler)
);
endmodule

